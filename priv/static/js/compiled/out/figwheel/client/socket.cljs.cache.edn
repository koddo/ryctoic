;; Analyzed by ClojureScript 0.0-3165
{:use-macros nil, :excludes #{}, :name figwheel.client.socket, :imports nil, :requires {cljs.reader cljs.reader, figwheel.client.utils figwheel.client.utils, utils figwheel.client.utils}, :uses {read-string cljs.reader}, :defs {open {:protocol-inline nil, :meta {:file nil, :arglists (quote ([{:keys [retry-count retried-count websocket-url build-id], :as opts}])), :end-column 11, :end-line 49, :column 7, :line 49}, :name figwheel.client.socket/open, :variadic false, :file "../priv/static/js/compiled/out/figwheel/client/socket.cljs", :end-column 11, :method-params ([p__16262]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{WebSocket any}, :variadic false, :max-fixed-arity 1}), :line 49, :end-line 49, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [retry-count retried-count websocket-url build-id], :as opts}])), :test true}, close! {:protocol-inline nil, :meta {:file nil, :arglists (quote ([])), :end-column 13, :end-line 45, :column 7, :line 45}, :name figwheel.client.socket/close!, :variadic false, :file "../priv/static/js/compiled/out/figwheel/client/socket.cljs", :end-column 13, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 0}), :line 45, :end-line 45, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :test true}, send! {:protocol-inline nil, :meta {:file nil, :arglists (quote ([msg])), :doc "Send a end message to the server.", :end-column 12, :end-line 39, :column 7, :line 39}, :name figwheel.client.socket/send!, :variadic false, :file "../priv/static/js/compiled/out/figwheel/client/socket.cljs", :end-column 12, :method-params ([msg]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{any clj-nil}, :variadic false, :max-fixed-arity 1}), :line 39, :end-line 39, :max-fixed-arity 1, :fn-var true, :arglists (quote ([msg])), :doc "Send a end message to the server.", :test true}, socket-atom {:file "../priv/static/js/compiled/out/figwheel/client/socket.cljs", :meta {:file nil, :end-column 21, :end-line 37, :column 10, :line 37}, :line 37, :column 1, :end-line 37, :end-column 21, :test true, :name figwheel.client.socket/socket-atom}, message-history-atom {:file "../priv/static/js/compiled/out/figwheel/client/socket.cljs", :meta {:file nil, :end-column 30, :end-line 35, :column 10, :line 35}, :line 35, :column 1, :end-line 35, :end-column 30, :test true, :name figwheel.client.socket/message-history-atom}, get-websocket-imp {:protocol-inline nil, :meta {:file nil, :arglists (quote ([])), :end-column 24, :end-line 6, :column 7, :line 6}, :name figwheel.client.socket/get-websocket-imp, :variadic false, :file "../priv/static/js/compiled/out/figwheel/client/socket.cljs", :end-column 24, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{nil any clj-nil}, :variadic false, :max-fixed-arity 0}), :line 6, :end-line 6, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :test true}}, :require-macros nil, :cljs.analyzer/constants {:order [:else :build-id :websocket-url :retried-count :retry-count :debug :msg-name :ping], :seen #{:ping :retried-count :else :debug :build-id :websocket-url :msg-name :retry-count}}, :doc nil}