dnsdock:
    image: tonistiigi/dnsdock
    command: -domain dnsdock -environment dev
    ports:
        - "172.17.0.1:53:53/udp"
    volumes:
        - /var/run/docker.sock:/var/run/docker.sock
    

nginx:   # TODO: this image runs nginx as root, is this a security issue?
    # image: nginx
    build: dockerfiles_empty_build_context
    dockerfile: Dockerfile_nginx

    links:
        - dnsdock
        - backend
        - figwheel
    ports:
        - "8443:8443"
    volumes:
        - nginx.conf:/etc/nginx/nginx.conf:ro
        - priv/ssl/server.crt:/etc/nginx/server.crt:ro
        - priv/ssl/server.key:/etc/nginx/server.key:ro
    
        
backend:
    build: dockerfiles_empty_build_context
    dockerfile: Dockerfile_backend

    working_dir: /home/theuser/ryctoic
    entrypoint: bin/entrypoint-backend.sh     # was entrypoint: /home/theuser/ryctoic/_rel/hello_world/bin/hello_world     and command: foreground

    volumes:
        - .:/home/theuser/ryctoic
        - ../ryctoic.secrets:/home/theuser/secrets      # see vm's shared dirs

    # ports:
    #     - "8080:8080"

    # expose:
    # we'll have to expose some ports if we need to interconnect erlang nodes 
    #  - "4369:4369"
    #  - "9101:9101"
    #  - "9102:9102"
    #  - "9103:9103"
    #  - "9104:9104"
    #  - "9105:9105"

    links:
        - dnsdock
        - postgres
        - figwheel
        

        
figwheel:
    build: dockerfiles_empty_build_context
    dockerfile: Dockerfile_figwheel

    volumes:
        - .:/home/theuser/ryctoic
        # cache dependencies of lein figwheel to avoid downloading them on every run, this is gitignored
        - ./client-web/lein-deps:/home/theuser/.m2/

    working_dir: /home/theuser/ryctoic/client-web
    command: lein figwheel
    # command: while true ; do echo "doing nothing" && sleep 5 ; done

    # stdin_open: true
    # tty: true


    
postgres:
    build: dockerfiles_empty_build_context
    dockerfile: Dockerfile_postgres
    expose:
        - "5432"
    environment:     # TODO: CRITICAL secure postgres docker
        - POSTGRES_USER=postgres
        - POSTGRES_PASSWORD=secret   # TODO: change this during deployment
        # - POSTGRES_PASSWORD=md50faab7f0bfc96e5ca6956b920a171564   # TODO: comment this like: please save your time and don't try to crack this one, we change it during deployment
        - PGDATA=/var/lib/postgresql/data   # this is default
    volumes_from:
        - data
    volumes:
        # - tmp:/home/theuser/tmp
        - sql/init.sql:/docker-entrypoint-initdb.d/init.sql
        - sql/init.sh:/docker-entrypoint-initdb.d/init.sh


pgtest:
    build: dockerfiles_empty_build_context
    dockerfile: Dockerfile_postgres
    expose:
        - "5432"
    environment:
        - POSTGRES_USER=postgres
        - POSTGRES_PASSWORD=secret
        - PGDATA=/var/lib/postgresql/data_outside_the_volume_to_start_from_scratch_every_time

    entrypoint: /bin/true     # bin/docker-compose.sh run --rm --entrypoint "/docker-entrypoint.sh" pgtest postgres ___please_dont_start___
    volumes:
        - /home/alex/mnt/ryctoic/sql/init.sh:/docker-entrypoint-initdb.d/init.sh
        - /home/alex/mnt/ryctoic/sql/init.sql:/docker-entrypoint-initdb.d/init.sql
        - /home/alex/mnt/ryctoic/sql:/sql
        # we can't share postgresql.conf and pg_hba.conf here, because at the moment of writing docker doesn't allow to map uids in volumes
        # so we simply copy these two files in init.sh

    # docker exec -it ryctoic_pgtest_run_1 psql --dbname ryctoicdb --user administrator --no-password --file /sql/init.test

    
data:
    image: postgres
    # dockerfile: Dockerfile_postgres
    volumes:
        - /var/lib/postgresql
        - tmp:/mnt
    entrypoint: /bin/true



flyway:
    build: dockerfiles_empty_build_context
    dockerfile: Dockerfile_flyway

    entrypoint: /bin/true     # bin/docker-compose.sh run --rm --no-deps --entrypoint "/home/theuser/bin/entrypoint-flyway.sh" flyway secrets/flyway.pgtest.conf info
    # entrypoint: bin/entrypoint-flyway.sh
    # command: secrets/flyway.conf info

    volumes:
        - /home/alex/mnt/ryctoic.secrets:/home/theuser/secrets
        - /home/alex/mnt/ryctoic/sql:/home/theuser/sql
        - /home/alex/mnt/ryctoic/bin/entrypoint-flyway.sh:/home/theuser/bin/entrypoint-flyway.sh

    links:
        - postgres


# docker ps -a | grep _run_ | awk '{print $1}' | xargs --no-run-if-empty docker rm


        
