begin;
set local role admin_role;

select set_config(
       'search_path',
       'pgtap,' || current_setting('search_path'),   -- path=whatever:$path
       true   -- local to transaction
);

select * from no_plan();

------------------------------------------------------------

select is( session_user, 'administrator', 'should be logged in as administrator' );
select is( current_user, 'admin_role', 'should set role admin_role' );
select is( version(), 'PostgreSQL 9.5.1 on x86_64-pc-linux-gnu, compiled by gcc (Debian 4.9.2-10) 4.9.2, 64-bit', 'should be this version of postgres' );

------------------------------------------------------------

select is( current_database(), 'ryctoicdb', 'db should be ryctoicdb' );
select db_owner_is ( 'ryctoicdb', 'admin_role');
select schema_owner_is ( 'app',  'admin_role');
select schema_owner_is ( 'misc', 'admin_role');
select schema_owner_is ( 'pgtap', 'admin_role');


select groups_are( array[ 'admin_role', 'client_role', 'sp_only_role', 'ssl_cert_group' ] );
select users_are(  array[ 'administrator', 'client', 'sp_only', 'postgres' ] );

select is_superuser( 'postgres' );
select isnt_superuser( 'admin_role' );
select isnt_superuser( 'client_role' );
select isnt_superuser( 'sp_only_role' );
select isnt_superuser( 'administrator' );
select isnt_superuser( 'client' );
select isnt_superuser( 'sp_only' );

select is( pg_has_role('administrator',  'admin_role',    'member'),  true,    'administrator should have admin_role' );
select is( pg_has_role('administrator',  'admin_role',    'usage'),   true,    'administrator should inherit admin_role' );
select is( pg_has_role('client',         'client_role',   'member'),  true,    'client should have client_role' );
select is( pg_has_role('client',         'client_role',   'usage'),   true,    'client should inherit client_role' );
select is( pg_has_role('sp_only',        'sp_only_role',  'member'),  true,    'sp_only should have sp_only_role' );
select is( pg_has_role('sp_only',        'sp_only_role',  'usage'),   true,    'sp_only should inherit sp_only_role' );

select is( pg_has_role('administrator',   'client_role',     'member'),   false,    'administrator should not have client_role' );
select is( pg_has_role('administrator',   'sp_only_role',    'member'),   false,    'administrator should not have sp_only_role' );
select is( pg_has_role('client',          'admin_role',      'member'),   false,    'client should not have admin_role' );
select is( pg_has_role('client',          'sp_only_role',    'member'),   false,    'client should not have sp_only_role' );
select is( pg_has_role('sp_only',         'admin_role',      'member'),   false,    'sp_only should not have admin_role' );
select is( pg_has_role('sp_only',         'client_role',     'member'),   false,    'sp_only should not have client_role' );

select is( pg_has_role('administrator',  'ssl_cert_group',    'member'),  true,    'administrator should have ssl_cert_group role' );
select is( pg_has_role('client',         'ssl_cert_group',    'member'),  true,    'client should have ssl_cert_group role' );
select is( pg_has_role('sp_only',        'ssl_cert_group',    'member'),  true,    'sp_only should have ssl_cert_group role' );


select schemas_are( array['app', 'misc'] );
select has_schema('app');
select has_schema('misc');
select has_schema('pgtap');
select hasnt_schema('public');

select is( current_schemas(false), '{pgtap,app,misc}', 'schemas should be the following' );  -- false means don't include system schemas like pg_catalog

select database_privs_are( 'ryctoicdb', 'admin_role', array['CONNECT', 'CREATE', 'TEMPORARY'] );
select database_privs_are( 'ryctoicdb', 'client_role', array['CONNECT'] );
select database_privs_are( 'ryctoicdb', 'sp_only_role', '{}' );
select schema_privs_are( 'app',    'admin_role',    array['USAGE', 'CREATE'] );
select schema_privs_are( 'misc',   'admin_role',    array['USAGE', 'CREATE'] );
select schema_privs_are( 'pgtap',  'admin_role',    array['USAGE', 'CREATE'] );
select schema_privs_are( 'app',    'client_role',   array['USAGE'] );
select schema_privs_are( 'misc',   'client_role',   '{}' );
select schema_privs_are( 'pgtap',  'client_role',   '{}' );
select schema_privs_are( 'app',    'sp_only_role',  '{}' );
select schema_privs_are( 'misc',   'sp_only_role',  '{}' );
select schema_privs_are( 'pgtap',  'sp_only_role',  '{}' );

select set_has( 'select name from pg_available_extensions', $$values ('sslinfo'), ('uuid-ossp'), ('pgcrypto')$$, 'these extensions should be installed' );

select results_eq( 'select setting from pg_settings where name=''plpgsql.extra_warnings'';', $$values ('all');$$, 'plpgsql.extra_warnings should be set to all' );
select results_eq( 'select setting from pg_settings where name=''plpgsql.extra_errors'';',   $$values ('all');$$, 'plpgsql.extra_errors should be set to all' );


select function_privs_are( 'misc', 'gen_random_uuid',  '{}', 'admin_role', array['EXECUTE'] ); 
select function_privs_are( 'misc', 'uuid_nil',         '{}', 'admin_role', array['EXECUTE'] ); 
select function_privs_are( 'misc', 'gen_random_uuid',  '{}', 'client_role', '{}', 'not granted yet' ); 
select function_privs_are( 'misc', 'uuid_nil',         '{}', 'client_role', '{}', 'not granted yet' ); 

------------------------------------------------------------
-- the client_role and sp_only role privs are revoked
-- until we grant some

select table_privs_are( schemaname,  tablename, 'client_role', '{}', 'the client_role role should not have any privileges for table ' || schemaname || '.' || tablename )
from pg_tables   where schemaname in ('app', 'misc', 'pgtap');

select sequence_privs_are( ns.nspname, cl.relname, 'client_role', '{}', 'the client_role role should not have any privileges for sequence ' || ns.nspname || '.' || cl.relname )
from pg_class as cl join pg_namespace as ns   on cl.relnamespace = ns.oid
where cl.relkind='S' and ns.nspname in ('app', 'misc', 'pgtap'); 

select function_privs_are( ns.nspname, pr.proname, string_to_array(oidvectortypes(pr.proargtypes), ', '), 'client_role', '{}', 'the client_role role should not have any privileges for function ' || ns.nspname || '.' || pr.proname )
from pg_proc as pr join pg_namespace as ns   on pr.pronamespace = ns.oid
where ns.nspname in ('app', 'misc', 'pgtap') ; 


select table_privs_are( schemaname,  tablename, 'sp_only_role', '{}', 'the sp_only_role role should not have any privileges for table ' || schemaname || '.' || tablename )
from pg_tables   where schemaname in ('app', 'misc', 'pgtap');

select sequence_privs_are( ns.nspname, cl.relname, 'sp_only_role', '{}', 'the sp_only_role role should not have any privileges for sequence ' || ns.nspname || '.' || cl.relname )
from pg_class as cl join pg_namespace as ns   on cl.relnamespace = ns.oid
where cl.relkind='S' and ns.nspname in ('app', 'misc', 'pgtap'); 

select function_privs_are( ns.nspname, pr.proname, string_to_array(oidvectortypes(pr.proargtypes), ', '), 'sp_only_role', '{}', 'the sp_only_role role should not have any privileges for function ' || ns.nspname || '.' || pr.proname )
from pg_proc as pr join pg_namespace as ns   on pr.pronamespace = ns.oid
where ns.nspname in ('app', 'misc', 'pgtap') ; 

------------------------------------------------------------
-- the public role privs are revoked

select database_privs_are( 'ryctoicdb', 'public', '{}' );
select schema_privs_are( 'app',    'public',   '{}' );
select schema_privs_are( 'misc',   'public',   '{}' );
select schema_privs_are( 'pgtap',  'public',   '{}' );

select table_privs_are( schemaname,  tablename, 'public', '{}', 'the public role should not have any privileges for table ' || schemaname || '.' || tablename )
from pg_tables   where schemaname in ('app', 'misc', 'pgtap');

select sequence_privs_are( ns.nspname, cl.relname, 'public', '{}', 'the public role should not have any privileges for sequence ' || ns.nspname || '.' || cl.relname )
from pg_class as cl join pg_namespace as ns   on cl.relnamespace = ns.oid
where cl.relkind='S' and ns.nspname in ('app', 'misc', 'pgtap'); 

select function_privs_are( ns.nspname, pr.proname, string_to_array(oidvectortypes(pr.proargtypes), ', '), 'public', '{}', 'the public role should not have any privileges for function ' || ns.nspname || '.' || pr.proname )
from pg_proc as pr join pg_namespace as ns   on pr.pronamespace = ns.oid
where ns.nspname in ('app', 'misc', 'pgtap') ; 

select tablespace_privs_are( 'pg_default',  'public', '{}' );
select tablespace_privs_are( 'pg_global',   'public', '{}' );

------------------------------------------------------------

select tables_are( 'app', '{}', 'should have these tables' );

------------------------------------------------------------

select * from finish();

rollback;


