;; Analyzed by ClojureScript 0.0-3165
{:defs {put-active? {:protocol-inline nil, :meta {:file nil, :arglists (quote ([box])), :end-column 18, :end-line 22, :column 7, :line 22}, :name cljs.core.async.impl.channels/put-active?, :variadic false, :file "../www/static/js/compiled/out/cljs/core/async/impl/channels.cljs", :end-column 18, :method-params ([box]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 22, :end-line 22, :max-fixed-arity 1, :fn-var true, :arglists (quote ([box])), :test true}, t28195 {:num-fields 3, :protocols #{cljs.core/IMeta cljs.core/IDeref cljs.core/IWithMeta}, :name cljs.core.async.impl.channels/t28195, :file "../www/static/js/compiled/out/cljs/core/async/impl/channels.cljs", :type true, :anonymous true, :column 3, :line 17, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IDeref cljs.core/IWithMeta}}, ->t28192 {:protocol-inline nil, :meta {:file nil, :arglists (quote ([val box meta28193])), :factory :positional, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IDeref cljs.core/IWithMeta}, :protocols #{cljs.core/IMeta cljs.core/IDeref cljs.core/IWithMeta}, :anonymous true}, :protocols #{cljs.core/IMeta cljs.core/IDeref cljs.core/IWithMeta}, :name cljs.core.async.impl.channels/->t28192, :variadic false, :file "../www/static/js/compiled/out/cljs/core/async/impl/channels.cljs", :method-params ([val box meta28193]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 3, :factory :positional, :methods ({:tag cljs.core.async.impl.channels/t28192, :variadic false, :max-fixed-arity 3}), :line 17, :max-fixed-arity 3, :fn-var true, :arglists (quote ([val box meta28193])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IDeref cljs.core/IWithMeta}, :test true}, chan {:protocol-inline nil, :meta {:file nil, :arglists (quote ([buf] [buf xform] [buf xform exh])), :end-column 11, :end-line 165, :column 7, :line 165}, :name cljs.core.async.impl.channels/chan, :variadic false, :file "../www/static/js/compiled/out/cljs/core/async/impl/channels.cljs", :end-column 11, :method-params ([buf] [buf xform] [buf xform exh]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1} {:tag cljs.core.async.impl.channels/ManyToManyChannel, :variadic false, :max-fixed-arity 2} {:tag cljs.core.async.impl.channels/ManyToManyChannel, :variadic false, :max-fixed-arity 3}), :line 165, :end-line 165, :max-fixed-arity 3, :fn-var true, :arglists (quote ([buf] [buf xform] [buf xform exh])), :test true}, ->t28195 {:protocol-inline nil, :meta {:file nil, :arglists (quote ([val box meta28196])), :factory :positional, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IDeref cljs.core/IWithMeta}, :protocols #{cljs.core/IMeta cljs.core/IDeref cljs.core/IWithMeta}, :anonymous true}, :protocols #{cljs.core/IMeta cljs.core/IDeref cljs.core/IWithMeta}, :name cljs.core.async.impl.channels/->t28195, :variadic false, :file "../www/static/js/compiled/out/cljs/core/async/impl/channels.cljs", :method-params ([val box meta28196]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 3, :factory :positional, :methods ({:tag cljs.core.async.impl.channels/t28195, :variadic false, :max-fixed-arity 3}), :line 17, :max-fixed-arity 3, :fn-var true, :arglists (quote ([val box meta28196])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IDeref cljs.core/IWithMeta}, :test true}, box {:protocol-inline nil, :meta {:file nil, :arglists (quote ([val])), :end-column 10, :end-line 16, :column 7, :line 16}, :name cljs.core.async.impl.channels/box, :variadic false, :file "../www/static/js/compiled/out/cljs/core/async/impl/channels.cljs", :end-column 10, :method-params ([val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core.async.impl.channels/t28195, :variadic false, :max-fixed-arity 1}), :line 16, :end-line 16, :max-fixed-arity 1, :fn-var true, :arglists (quote ([val])), :test true}, MMC {:meta {:file nil, :protocol-info {:methods {abort [[this]]}}, :protocol-symbol true, :doc nil, :end-column 17, :end-line 27, :column 14, :line 27}, :protocol-symbol true, :name cljs.core.async.impl.channels/MMC, :file "../www/static/js/compiled/out/cljs/core/async/impl/channels.cljs", :end-column 17, :column 1, :line 27, :protocol-info {:methods {abort [[this]]}}, :info nil, :end-line 27, :impls #{cljs.core.async.impl.channels/ManyToManyChannel}, :doc nil, :test true}, ->PutBox {:protocol-inline nil, :meta {:file nil, :arglists (quote ([handler val])), :factory :positional, :skip-protocol-flag nil, :protocols #{}, :end-column 16, :end-line 20, :column 10, :line 20}, :protocols #{}, :name cljs.core.async.impl.channels/->PutBox, :variadic false, :file "../www/static/js/compiled/out/cljs/core/async/impl/channels.cljs", :end-column 16, :method-params ([handler val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :factory :positional, :methods ({:tag cljs.core.async.impl.channels/PutBox, :variadic false, :max-fixed-arity 2}), :line 20, :end-line 20, :max-fixed-arity 2, :fn-var true, :arglists (quote ([handler val])), :skip-protocol-flag nil, :test true}, t28192 {:num-fields 3, :protocols #{cljs.core/IMeta cljs.core/IDeref cljs.core/IWithMeta}, :name cljs.core.async.impl.channels/t28192, :file "../www/static/js/compiled/out/cljs/core/async/impl/channels.cljs", :type true, :anonymous true, :column 3, :line 17, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IDeref cljs.core/IWithMeta}}, abort {:protocol-inline nil, :meta {:file nil, :arglists (quote ([this])), :doc nil, :protocol cljs.core.async.impl.channels/MMC, :end-column 9, :end-line 28, :column 4, :line 28}, :protocol cljs.core.async.impl.channels/MMC, :name cljs.core.async.impl.channels/abort, :variadic false, :file "../www/static/js/compiled/out/cljs/core/async/impl/channels.cljs", :end-column 9, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 27, :end-line 28, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc nil, :test true}, ex-handler {:protocol-inline nil, :meta {:file nil, :arglists (quote ([ex])), :private true, :end-column 18, :end-line 155, :column 8, :line 155}, :private true, :name cljs.core.async.impl.channels/ex-handler, :variadic false, :file "../www/static/js/compiled/out/cljs/core/async/impl/channels.cljs", :end-column 18, :method-params ([ex]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag clj-nil, :variadic false, :max-fixed-arity 1}), :line 155, :end-line 155, :max-fixed-arity 1, :fn-var true, :arglists (quote ([ex])), :test true}, MAX_DIRTY {:file "../www/static/js/compiled/out/cljs/core/async/impl/channels.cljs", :meta {:file nil, :const true, :end-column 23, :end-line 25, :column 14, :line 25}, :line 25, :column 1, :end-line 25, :end-column 23, :const true, :test true, :name cljs.core.async.impl.channels/MAX_DIRTY}, ManyToManyChannel {:num-fields 7, :protocols #{cljs.core.async.impl.channels/MMC cljs.core.async.impl.protocols/Channel cljs.core.async.impl.protocols/WritePort cljs.core.async.impl.protocols/ReadPort}, :name cljs.core.async.impl.channels/ManyToManyChannel, :file "../www/static/js/compiled/out/cljs/core/async/impl/channels.cljs", :end-column 27, :type true, :column 10, :line 30, :record false, :end-line 30, :skip-protocol-flag nil}, handle {:protocol-inline nil, :meta {:file nil, :arglists (quote ([buf exh t])), :private true, :end-column 14, :end-line 159, :column 8, :line 159}, :private true, :name cljs.core.async.impl.channels/handle, :variadic false, :file "../www/static/js/compiled/out/cljs/core/async/impl/channels.cljs", :end-column 14, :method-params ([buf exh t]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 3}), :line 159, :end-line 159, :max-fixed-arity 3, :fn-var true, :arglists (quote ([buf exh t])), :test true}, ->ManyToManyChannel {:protocol-inline nil, :meta {:file nil, :arglists (quote ([takes dirty-takes puts dirty-puts buf closed add!])), :factory :positional, :skip-protocol-flag nil, :protocols #{cljs.core.async.impl.channels/MMC cljs.core.async.impl.protocols/Channel cljs.core.async.impl.protocols/WritePort cljs.core.async.impl.protocols/ReadPort}, :end-column 27, :end-line 30, :column 10, :line 30}, :protocols #{cljs.core.async.impl.channels/MMC cljs.core.async.impl.protocols/Channel cljs.core.async.impl.protocols/WritePort cljs.core.async.impl.protocols/ReadPort}, :name cljs.core.async.impl.channels/->ManyToManyChannel, :variadic false, :file "../www/static/js/compiled/out/cljs/core/async/impl/channels.cljs", :end-column 27, :method-params ([takes dirty-takes puts dirty-puts buf closed add!]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :factory :positional, :methods ({:tag cljs.core.async.impl.channels/ManyToManyChannel, :variadic false, :max-fixed-arity 7}), :line 30, :end-line 30, :max-fixed-arity 7, :fn-var true, :arglists (quote ([takes dirty-takes puts dirty-puts buf closed add!])), :skip-protocol-flag nil, :test true}, PutBox {:num-fields 2, :protocols #{}, :name cljs.core.async.impl.channels/PutBox, :file "../www/static/js/compiled/out/cljs/core/async/impl/channels.cljs", :end-column 16, :type true, :column 10, :line 20, :record false, :end-line 20, :skip-protocol-flag nil}}, :imports nil, :requires {buffers cljs.core.async.impl.buffers, cljs.core.async.impl.buffers cljs.core.async.impl.buffers, dispatch cljs.core.async.impl.dispatch, cljs.core.async.impl.dispatch cljs.core.async.impl.dispatch, cljs.core.async.impl.protocols cljs.core.async.impl.protocols, impl cljs.core.async.impl.protocols}, :uses nil, :require-macros nil, :use-macros nil, :excludes #{}, :doc nil, :name cljs.core.async.impl.channels}